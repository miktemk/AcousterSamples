package org.acouster.eyefitness;

import org.acouster.graphics.anim.AnimatedStroke;

public class UtilsStrokes
{
	private static final int STROKE_COLOR = 0x3333DD;
	private static final int STROKE_WIDTH = 10;

	public static AnimatedStroke hardcodedPen_round_counter_clock_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.9219858f, 0.31850117f, STROKE_WIDTH, true);
		s.append(0, 0.91962177f, 0.29508197f, STROKE_WIDTH, false);
		s.append(0, 0.91962177f, 0.28103045f, STROKE_WIDTH, false);
		s.append(1, 0.91725767f, 0.26932085f, STROKE_WIDTH, false);
		s.append(1, 0.91725767f, 0.25761124f, STROKE_WIDTH, false);
		s.append(4, 0.9148936f, 0.24590164f, STROKE_WIDTH, false);
		s.append(12, 0.9125295f, 0.23887588f, STROKE_WIDTH, false);
		s.append(20, 0.9101655f, 0.23419204f, STROKE_WIDTH, false);
		s.append(24, 0.9101655f, 0.22716628f, STROKE_WIDTH, false);
		s.append(32, 0.9078014f, 0.22248244f, STROKE_WIDTH, false);
		s.append(40, 0.9030733f, 0.21545668f, STROKE_WIDTH, false);
		s.append(49, 0.9007092f, 0.20843092f, STROKE_WIDTH, false);
		s.append(57, 0.8983452f, 0.20374708f, STROKE_WIDTH, false);
		s.append(65, 0.89361703f, 0.19906323f, STROKE_WIDTH, false);
		s.append(73, 0.8888889f, 0.19437939f, STROKE_WIDTH, false);
		s.append(81, 0.8865248f, 0.18735363f, STROKE_WIDTH, false);
		s.append(89, 0.8794326f, 0.18266979f, STROKE_WIDTH, false);
		s.append(93, 0.8747045f, 0.17798595f, STROKE_WIDTH, false);
		s.append(101, 0.86997634f, 0.17330211f, STROKE_WIDTH, false);
		s.append(110, 0.86288416f, 0.16627635f, STROKE_WIDTH, false);
		s.append(117, 0.858156f, 0.1615925f, STROKE_WIDTH, false);
		s.append(126, 0.85106385f, 0.15456675f, STROKE_WIDTH, false);
		s.append(133, 0.8439716f, 0.1498829f, STROKE_WIDTH, false);
		s.append(142, 0.83687943f, 0.14285715f, STROKE_WIDTH, false);
		s.append(149, 0.82978725f, 0.13583139f, STROKE_WIDTH, false);
		s.append(153, 0.822695f, 0.12880562f, STROKE_WIDTH, false);
		s.append(161, 0.81560284f, 0.12412178f, STROKE_WIDTH, false);
		s.append(169, 0.80851066f, 0.11709602f, STROKE_WIDTH, false);
		s.append(177, 0.8014184f, 0.11241218f, STROKE_WIDTH, false);
		s.append(186, 0.7966903f, 0.10772834f, STROKE_WIDTH, false);
		s.append(193, 0.7895981f, 0.10538641f, STROKE_WIDTH, false);
		s.append(201, 0.7825059f, 0.10070258f, STROKE_WIDTH, false);
		s.append(209, 0.7754137f, 0.09601874f, STROKE_WIDTH, false);
		s.append(213, 0.7683215f, 0.09367681f, STROKE_WIDTH, false);
		s.append(221, 0.76122934f, 0.091334894f, STROKE_WIDTH, false);
		s.append(229, 0.7541371f, 0.088992976f, STROKE_WIDTH, false);
		s.append(238, 0.74940896f, 0.08430913f, STROKE_WIDTH, false);
		s.append(245, 0.7423168f, 0.08196721f, STROKE_WIDTH, false);
		s.append(253, 0.7352246f, 0.07962529f, STROKE_WIDTH, false);
		s.append(261, 0.72813237f, 0.077283375f, STROKE_WIDTH, false);
		s.append(269, 0.7210402f, 0.07494145f, STROKE_WIDTH, false);
		s.append(273, 0.713948f, 0.07259953f, STROKE_WIDTH, false);
		s.append(281, 0.7068558f, 0.07025761f, STROKE_WIDTH, false);
		s.append(289, 0.69739956f, 0.07025761f, STROKE_WIDTH, false);
		s.append(297, 0.6879433f, 0.06791569f, STROKE_WIDTH, false);
		s.append(305, 0.68085104f, 0.06323185f, STROKE_WIDTH, false);
		s.append(313, 0.6713948f, 0.06323185f, STROKE_WIDTH, false);
		s.append(321, 0.66193855f, 0.06323185f, STROKE_WIDTH, false);
		s.append(329, 0.6524823f, 0.06323185f, STROKE_WIDTH, false);
		s.append(333, 0.643026f, 0.06088993f, STROKE_WIDTH, false);
		s.append(341, 0.6335697f, 0.06088993f, STROKE_WIDTH, false);
		s.append(349, 0.62647754f, 0.05854801f, STROKE_WIDTH, false);
		s.append(357, 0.61702126f, 0.05854801f, STROKE_WIDTH, false);
		s.append(365, 0.607565f, 0.05854801f, STROKE_WIDTH, false);
		s.append(373, 0.59810877f, 0.05854801f, STROKE_WIDTH, false);
		s.append(381, 0.5862884f, 0.05854801f, STROKE_WIDTH, false);
		s.append(389, 0.5768322f, 0.05620609f, STROKE_WIDTH, false);
		s.append(393, 0.5650118f, 0.05620609f, STROKE_WIDTH, false);
		s.append(401, 0.5531915f, 0.05620609f, STROKE_WIDTH, false);
		s.append(409, 0.5437352f, 0.05620609f, STROKE_WIDTH, false);
		s.append(417, 0.5319149f, 0.05620609f, STROKE_WIDTH, false);
		s.append(425, 0.5224586f, 0.05854801f, STROKE_WIDTH, false);
		s.append(433, 0.5106383f, 0.05854801f, STROKE_WIDTH, false);
		s.append(441, 0.501182f, 0.05854801f, STROKE_WIDTH, false);
		s.append(450, 0.49172577f, 0.06088993f, STROKE_WIDTH, false);
		s.append(453, 0.47990543f, 0.06088993f, STROKE_WIDTH, false);
		s.append(461, 0.47044918f, 0.06323185f, STROKE_WIDTH, false);
		s.append(469, 0.45862883f, 0.06323185f, STROKE_WIDTH, false);
		s.append(477, 0.44680852f, 0.06323185f, STROKE_WIDTH, false);
		s.append(485, 0.43498817f, 0.06791569f, STROKE_WIDTH, false);
		s.append(493, 0.42553192f, 0.07025761f, STROKE_WIDTH, false);
		s.append(501, 0.41371158f, 0.07259953f, STROKE_WIDTH, false);
		s.append(509, 0.40189126f, 0.07494145f, STROKE_WIDTH, false);
		s.append(513, 0.39243498f, 0.07962529f, STROKE_WIDTH, false);
		s.append(521, 0.38061467f, 0.08196721f, STROKE_WIDTH, false);
		s.append(529, 0.3711584f, 0.08430913f, STROKE_WIDTH, false);
		s.append(537, 0.3617021f, 0.088992976f, STROKE_WIDTH, false);
		s.append(545, 0.35224587f, 0.091334894f, STROKE_WIDTH, false);
		s.append(553, 0.3427896f, 0.09367681f, STROKE_WIDTH, false);
		s.append(561, 0.33333334f, 0.09836066f, STROKE_WIDTH, false);
		s.append(565, 0.32387707f, 0.103044495f, STROKE_WIDTH, false);
		s.append(573, 0.31205675f, 0.10538641f, STROKE_WIDTH, false);
		s.append(582, 0.30260047f, 0.11007026f, STROKE_WIDTH, false);
		s.append(589, 0.29078013f, 0.11241218f, STROKE_WIDTH, false);
		s.append(597, 0.2789598f, 0.11709602f, STROKE_WIDTH, false);
		s.append(605, 0.2671395f, 0.11943794f, STROKE_WIDTH, false);
		s.append(613, 0.25531915f, 0.12412178f, STROKE_WIDTH, false);
		s.append(621, 0.24349882f, 0.12880562f, STROKE_WIDTH, false);
		s.append(625, 0.23167849f, 0.13114753f, STROKE_WIDTH, false);
		s.append(633, 0.21985815f, 0.13583139f, STROKE_WIDTH, false);
		s.append(641, 0.2104019f, 0.14051522f, STROKE_WIDTH, false);
		s.append(649, 0.20094563f, 0.14519906f, STROKE_WIDTH, false);
		s.append(657, 0.19148937f, 0.1498829f, STROKE_WIDTH, false);
		s.append(665, 0.18203309f, 0.15456675f, STROKE_WIDTH, false);
		s.append(673, 0.1749409f, 0.15925059f, STROKE_WIDTH, false);
		s.append(681, 0.17021276f, 0.16393442f, STROKE_WIDTH, false);
		s.append(685, 0.16312057f, 0.16861826f, STROKE_WIDTH, false);
		s.append(693, 0.15839243f, 0.17564403f, STROKE_WIDTH, false);
		s.append(701, 0.15130024f, 0.18032786f, STROKE_WIDTH, false);
		s.append(709, 0.14420804f, 0.18969555f, STROKE_WIDTH, false);
		s.append(717, 0.13711584f, 0.19672132f, STROKE_WIDTH, false);
		s.append(725, 0.13002364f, 0.20608899f, STROKE_WIDTH, false);
		s.append(733, 0.1252955f, 0.21311475f, STROKE_WIDTH, false);
		s.append(741, 0.11820331f, 0.22248244f, STROKE_WIDTH, false);
		s.append(749, 0.11347517f, 0.23185012f, STROKE_WIDTH, false);
		s.append(753, 0.10638298f, 0.24121779f, STROKE_WIDTH, false);
		s.append(761, 0.10165485f, 0.25058547f, STROKE_WIDTH, false);
		s.append(769, 0.09456265f, 0.25995317f, STROKE_WIDTH, false);
		s.append(777, 0.08983452f, 0.26932085f, STROKE_WIDTH, false);
		s.append(785, 0.08274232f, 0.28103045f, STROKE_WIDTH, false);
		s.append(793, 0.07801419f, 0.29274005f, STROKE_WIDTH, false);
		s.append(801, 0.07328605f, 0.30444965f, STROKE_WIDTH, false);
		s.append(805, 0.07092199f, 0.31615925f, STROKE_WIDTH, false);
		s.append(813, 0.06619386f, 0.32786885f, STROKE_WIDTH, false);
		s.append(821, 0.06382979f, 0.33957845f, STROKE_WIDTH, false);
		s.append(829, 0.059101656f, 0.35128805f, STROKE_WIDTH, false);
		s.append(837, 0.056737587f, 0.36533958f, STROKE_WIDTH, false);
		s.append(846, 0.05437352f, 0.37704918f, STROKE_WIDTH, false);
		s.append(853, 0.052009456f, 0.3911007f, STROKE_WIDTH, false);
		s.append(861, 0.04964539f, 0.40515223f, STROKE_WIDTH, false);
		s.append(865, 0.047281325f, 0.42154565f, STROKE_WIDTH, false);
		s.append(873, 0.04491726f, 0.43559718f, STROKE_WIDTH, false);
		s.append(881, 0.04255319f, 0.4496487f, STROKE_WIDTH, false);
		s.append(889, 0.040189125f, 0.46370023f, STROKE_WIDTH, false);
		s.append(897, 0.040189125f, 0.47775176f, STROKE_WIDTH, false);
		s.append(905, 0.040189125f, 0.4918033f, STROKE_WIDTH, false);
		s.append(913, 0.040189125f, 0.5081967f, STROKE_WIDTH, false);
		s.append(921, 0.040189125f, 0.52224827f, STROKE_WIDTH, false);
		s.append(925, 0.040189125f, 0.53629977f, STROKE_WIDTH, false);
		s.append(933, 0.040189125f, 0.55035126f, STROKE_WIDTH, false);
		s.append(941, 0.04491726f, 0.5644028f, STROKE_WIDTH, false);
		s.append(949, 0.047281325f, 0.58079624f, STROKE_WIDTH, false);
		s.append(957, 0.052009456f, 0.5948478f, STROKE_WIDTH, false);
		s.append(965, 0.056737587f, 0.6112412f, STROKE_WIDTH, false);
		s.append(973, 0.06146572f, 0.6252927f, STROKE_WIDTH, false);
		s.append(981, 0.06855792f, 0.6393443f, STROKE_WIDTH, false);
		s.append(985, 0.07801419f, 0.6533958f, STROKE_WIDTH, false);
		s.append(993, 0.08747045f, 0.6651054f, STROKE_WIDTH, false);
		s.append(1001, 0.09929078f, 0.6791569f, STROKE_WIDTH, false);
		s.append(1009, 0.11111111f, 0.6885246f, STROKE_WIDTH, false);
		s.append(1017, 0.1252955f, 0.7002342f, STROKE_WIDTH, false);
		s.append(1025, 0.13711584f, 0.7096019f, STROKE_WIDTH, false);
		s.append(1033, 0.15130024f, 0.71662766f, STROKE_WIDTH, false);
		s.append(1041, 0.16548464f, 0.7236534f, STROKE_WIDTH, false);
		s.append(1046, 0.17966904f, 0.73067915f, STROKE_WIDTH, false);
		s.append(1053, 0.19385342f, 0.73770493f, STROKE_WIDTH, false);
		s.append(1061, 0.20803782f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1069, 0.22222222f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1077, 0.23640662f, 0.75409836f, STROKE_WIDTH, false);
		s.append(1085, 0.250591f, 0.76112413f, STROKE_WIDTH, false);
		s.append(1093, 0.26477543f, 0.76346606f, STROKE_WIDTH, false);
		s.append(1101, 0.27659574f, 0.7681499f, STROKE_WIDTH, false);
		s.append(1110, 0.2884161f, 0.7728337f, STROKE_WIDTH, false);
		s.append(1113, 0.3002364f, 0.77517563f, STROKE_WIDTH, false);
		s.append(1121, 0.30969268f, 0.77751756f, STROKE_WIDTH, false);
		s.append(1129, 0.31914893f, 0.7798595f, STROKE_WIDTH, false);
		s.append(1137, 0.3286052f, 0.7822014f, STROKE_WIDTH, false);
		s.append(1145, 0.3356974f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1153, 0.34515366f, 0.7892272f, STROKE_WIDTH, false);
		s.append(1161, 0.35224587f, 0.7915691f, STROKE_WIDTH, false);
		s.append(1165, 0.3617021f, 0.793911f, STROKE_WIDTH, false);
		s.append(1173, 0.36879432f, 0.793911f, STROKE_WIDTH, false);
		s.append(1181, 0.3782506f, 0.7962529f, STROKE_WIDTH, false);
		s.append(1189, 0.38534278f, 0.79859483f, STROKE_WIDTH, false);
		s.append(1197, 0.39479905f, 0.80093676f, STROKE_WIDTH, false);
		s.append(1205, 0.40189126f, 0.80093676f, STROKE_WIDTH, false);
		s.append(1213, 0.4113475f, 0.8032787f, STROKE_WIDTH, false);
		s.append(1221, 0.41843972f, 0.8056206f, STROKE_WIDTH, false);
		s.append(1225, 0.42553192f, 0.80796254f, STROKE_WIDTH, false);
		s.append(1233, 0.4326241f, 0.80796254f, STROKE_WIDTH, false);
		s.append(1242, 0.4397163f, 0.81030446f, STROKE_WIDTH, false);
		s.append(1249, 0.44444445f, 0.81030446f, STROKE_WIDTH, false);
		s.append(1257, 0.4491726f, 0.8126464f, STROKE_WIDTH, false);
		s.append(1265, 0.4539007f, 0.8126464f, STROKE_WIDTH, false);
		s.append(1273, 0.45862883f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1281, 0.46335697f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1285, 0.4680851f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1293, 0.47281325f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1301, 0.47754136f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1309, 0.4822695f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1317, 0.48699763f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1325, 0.49172577f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1333, 0.49408984f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1341, 0.4964539f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1346, 0.49881798f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1369, 0.4964539f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1377, 0.49408984f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1385, 0.4893617f, 0.81030446f, STROKE_WIDTH, false);
		s.append(1393, 0.47990543f, 0.8032787f, STROKE_WIDTH, false);
		s.append(1401, 0.47044918f, 0.7962529f, STROKE_WIDTH, false);
		s.append(1409, 0.4609929f, 0.78688526f, STROKE_WIDTH, false);
		s.append(1413, 0.4491726f, 0.77751756f, STROKE_WIDTH, false);
		s.append(1421, 0.43735224f, 0.7704918f, STROKE_WIDTH, false);
		s.append(1429, 0.42553192f, 0.76346606f, STROKE_WIDTH, false);
		s.append(1437, 0.41607565f, 0.7564403f, STROKE_WIDTH, false);
		s.append(1445, 0.4066194f, 0.7517564f, STROKE_WIDTH, false);
		s.append(1453, 0.3995272f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1461, 0.39243498f, 0.7470726f, STROKE_WIDTH, false);
		s.append(1465, 0.38770685f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1474, 0.38297874f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1513, 0.38534278f, 0.7470726f, STROKE_WIDTH, false);
		s.append(1521, 0.39007092f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1529, 0.3995272f, 0.75409836f, STROKE_WIDTH, false);
		s.append(1533, 0.4113475f, 0.76346606f, STROKE_WIDTH, false);
		s.append(1541, 0.42553192f, 0.7704918f, STROKE_WIDTH, false);
		s.append(1549, 0.44208038f, 0.77751756f, STROKE_WIDTH, false);
		s.append(1557, 0.45862883f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1565, 0.47281325f, 0.7915691f, STROKE_WIDTH, false);
		s.append(1573, 0.48699763f, 0.79859483f, STROKE_WIDTH, false);
		s.append(1581, 0.4964539f, 0.8032787f, STROKE_WIDTH, false);
		s.append(1589, 0.5035461f, 0.80796254f, STROKE_WIDTH, false);
		s.append(1593, 0.50827426f, 0.8126464f, STROKE_WIDTH, false);
		s.append(1601, 0.50827426f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1609, 0.50827426f, 0.8196721f, STROKE_WIDTH, false);
		s.append(1617, 0.50591016f, 0.82435596f, STROKE_WIDTH, false);
		s.append(1625, 0.501182f, 0.8290398f, STROKE_WIDTH, false);
		s.append(1633, 0.49408984f, 0.83372366f, STROKE_WIDTH, false);
		s.append(1641, 0.48463356f, 0.8360656f, STROKE_WIDTH, false);
		s.append(1649, 0.47517732f, 0.84074944f, STROKE_WIDTH, false);
		s.append(1653, 0.46335697f, 0.84074944f, STROKE_WIDTH, false);
		s.append(1661, 0.45153666f, 0.8430913f, STROKE_WIDTH, false);
		s.append(1669, 0.4397163f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1677, 0.43026003f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1685, 0.42316785f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1693, 0.41607565f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1701, 0.4113475f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1705, 0.4113475f, 0.8430913f, STROKE_WIDTH, false);
		s.append(1713, 0.4113475f, 0.84074944f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_round_clock2_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.11583924f, 0.34192038f, STROKE_WIDTH, true);
		s.append(1, 0.1252955f, 0.28103045f, STROKE_WIDTH, false);
		s.append(1, 0.1465721f, 0.2529274f, STROKE_WIDTH, false);
		s.append(1, 0.16548464f, 0.23185012f, STROKE_WIDTH, false);
		s.append(2, 0.18203309f, 0.22014052f, STROKE_WIDTH, false);
		s.append(2, 0.1891253f, 0.21311475f, STROKE_WIDTH, false);
		s.append(5, 0.20803782f, 0.19672132f, STROKE_WIDTH, false);
		s.append(13, 0.21749409f, 0.18969555f, STROKE_WIDTH, false);
		s.append(17, 0.22695035f, 0.18266979f, STROKE_WIDTH, false);
		s.append(25, 0.23877068f, 0.17564403f, STROKE_WIDTH, false);
		s.append(33, 0.250591f, 0.16861826f, STROKE_WIDTH, false);
		s.append(41, 0.26477543f, 0.15925059f, STROKE_WIDTH, false);
		s.append(49, 0.27659574f, 0.15222482f, STROKE_WIDTH, false);
		s.append(57, 0.2884161f, 0.14519906f, STROKE_WIDTH, false);
		s.append(65, 0.3002364f, 0.1381733f, STROKE_WIDTH, false);
		s.append(73, 0.3144208f, 0.13348946f, STROKE_WIDTH, false);
		s.append(77, 0.3286052f, 0.1264637f, STROKE_WIDTH, false);
		s.append(85, 0.3427896f, 0.11943794f, STROKE_WIDTH, false);
		s.append(93, 0.35933807f, 0.114754096f, STROKE_WIDTH, false);
		s.append(101, 0.37588653f, 0.10772834f, STROKE_WIDTH, false);
		s.append(109, 0.39007092f, 0.103044495f, STROKE_WIDTH, false);
		s.append(117, 0.4066194f, 0.09836066f, STROKE_WIDTH, false);
		s.append(125, 0.42316785f, 0.09601874f, STROKE_WIDTH, false);
		s.append(133, 0.43735224f, 0.091334894f, STROKE_WIDTH, false);
		s.append(137, 0.4539007f, 0.088992976f, STROKE_WIDTH, false);
		s.append(146, 0.47044918f, 0.08665106f, STROKE_WIDTH, false);
		s.append(153, 0.48699763f, 0.08430913f, STROKE_WIDTH, false);
		s.append(161, 0.5035461f, 0.08196721f, STROKE_WIDTH, false);
		s.append(169, 0.5224586f, 0.07962529f, STROKE_WIDTH, false);
		s.append(177, 0.53900707f, 0.07962529f, STROKE_WIDTH, false);
		s.append(185, 0.5579196f, 0.07962529f, STROKE_WIDTH, false);
		s.append(194, 0.5744681f, 0.07962529f, STROKE_WIDTH, false);
		s.append(197, 0.59338063f, 0.07962529f, STROKE_WIDTH, false);
		s.append(205, 0.607565f, 0.08196721f, STROKE_WIDTH, false);
		s.append(213, 0.6241135f, 0.08430913f, STROKE_WIDTH, false);
		s.append(221, 0.63829786f, 0.088992976f, STROKE_WIDTH, false);
		s.append(229, 0.6524823f, 0.091334894f, STROKE_WIDTH, false);
		s.append(237, 0.6666667f, 0.09601874f, STROKE_WIDTH, false);
		s.append(246, 0.68085104f, 0.10070258f, STROKE_WIDTH, false);
		s.append(253, 0.69739956f, 0.10772834f, STROKE_WIDTH, false);
		s.append(257, 0.7115839f, 0.11241218f, STROKE_WIDTH, false);
		s.append(265, 0.7257683f, 0.11943794f, STROKE_WIDTH, false);
		s.append(273, 0.73758864f, 0.1264637f, STROKE_WIDTH, false);
		s.append(281, 0.75177306f, 0.13583139f, STROKE_WIDTH, false);
		s.append(289, 0.7659575f, 0.14285715f, STROKE_WIDTH, false);
		s.append(297, 0.7777778f, 0.15222482f, STROKE_WIDTH, false);
		s.append(305, 0.7895981f, 0.1615925f, STROKE_WIDTH, false);
		s.append(313, 0.8014184f, 0.17096019f, STROKE_WIDTH, false);
		s.append(317, 0.8132388f, 0.18032786f, STROKE_WIDTH, false);
		s.append(325, 0.8250591f, 0.19203748f, STROKE_WIDTH, false);
		s.append(333, 0.8345154f, 0.20608899f, STROKE_WIDTH, false);
		s.append(341, 0.8463357f, 0.21779859f, STROKE_WIDTH, false);
		s.append(349, 0.858156f, 0.22950819f, STROKE_WIDTH, false);
		s.append(357, 0.86997634f, 0.24355972f, STROKE_WIDTH, false);
		s.append(365, 0.8794326f, 0.25761124f, STROKE_WIDTH, false);
		s.append(373, 0.89125293f, 0.26932085f, STROKE_WIDTH, false);
		s.append(378, 0.9007092f, 0.28103045f, STROKE_WIDTH, false);
		s.append(385, 0.9101655f, 0.29274005f, STROKE_WIDTH, false);
		s.append(393, 0.91725767f, 0.30444965f, STROKE_WIDTH, false);
		s.append(401, 0.9243499f, 0.31615925f, STROKE_WIDTH, false);
		s.append(409, 0.92907804f, 0.32786885f, STROKE_WIDTH, false);
		s.append(417, 0.9338061f, 0.33957845f, STROKE_WIDTH, false);
		s.append(425, 0.9361702f, 0.35128805f, STROKE_WIDTH, false);
		s.append(433, 0.93853426f, 0.36533958f, STROKE_WIDTH, false);
		s.append(437, 0.94089836f, 0.37704918f, STROKE_WIDTH, false);
		s.append(445, 0.9432624f, 0.3911007f, STROKE_WIDTH, false);
		s.append(453, 0.9432624f, 0.4028103f, STROKE_WIDTH, false);
		s.append(461, 0.9432624f, 0.41686183f, STROKE_WIDTH, false);
		s.append(469, 0.9432624f, 0.43091336f, STROKE_WIDTH, false);
		s.append(477, 0.94089836f, 0.44262296f, STROKE_WIDTH, false);
		s.append(485, 0.94089836f, 0.4566745f, STROKE_WIDTH, false);
		s.append(493, 0.94089836f, 0.4683841f, STROKE_WIDTH, false);
		s.append(497, 0.93853426f, 0.4800937f, STROKE_WIDTH, false);
		s.append(506, 0.9361702f, 0.4918033f, STROKE_WIDTH, false);
		s.append(513, 0.9338061f, 0.50351286f, STROKE_WIDTH, false);
		s.append(521, 0.9314421f, 0.5152225f, STROKE_WIDTH, false);
		s.append(529, 0.92907804f, 0.529274f, STROKE_WIDTH, false);
		s.append(537, 0.92671394f, 0.54332554f, STROKE_WIDTH, false);
		s.append(545, 0.9243499f, 0.5550351f, STROKE_WIDTH, false);
		s.append(553, 0.91962177f, 0.5690867f, STROKE_WIDTH, false);
		s.append(557, 0.91725767f, 0.58313817f, STROKE_WIDTH, false);
		s.append(565, 0.9148936f, 0.5971897f, STROKE_WIDTH, false);
		s.append(573, 0.9101655f, 0.6112412f, STROKE_WIDTH, false);
		s.append(582, 0.9078014f, 0.6252927f, STROKE_WIDTH, false);
		s.append(589, 0.9030733f, 0.63700235f, STROKE_WIDTH, false);
		s.append(597, 0.8983452f, 0.6487119f, STROKE_WIDTH, false);
		s.append(605, 0.89361703f, 0.6627635f, STROKE_WIDTH, false);
		s.append(613, 0.89125293f, 0.67447305f, STROKE_WIDTH, false);
		s.append(617, 0.8865248f, 0.6861827f, STROKE_WIDTH, false);
		s.append(625, 0.88416076f, 0.69789225f, STROKE_WIDTH, false);
		s.append(633, 0.8794326f, 0.70725995f, STROKE_WIDTH, false);
		s.append(642, 0.8770686f, 0.7189696f, STROKE_WIDTH, false);
		s.append(649, 0.87234044f, 0.7283372f, STROKE_WIDTH, false);
		s.append(657, 0.8676123f, 0.74004686f, STROKE_WIDTH, false);
		s.append(665, 0.86288416f, 0.7494145f, STROKE_WIDTH, false);
		s.append(673, 0.858156f, 0.7587822f, STROKE_WIDTH, false);
		s.append(677, 0.85106385f, 0.7681499f, STROKE_WIDTH, false);
		s.append(685, 0.8416076f, 0.77751756f, STROKE_WIDTH, false);
		s.append(693, 0.8345154f, 0.78454334f, STROKE_WIDTH, false);
		s.append(701, 0.8250591f, 0.793911f, STROKE_WIDTH, false);
		s.append(709, 0.81560284f, 0.80093676f, STROKE_WIDTH, false);
		s.append(717, 0.80614656f, 0.80796254f, STROKE_WIDTH, false);
		s.append(725, 0.79432625f, 0.8149883f, STROKE_WIDTH, false);
		s.append(733, 0.7825059f, 0.82435596f, STROKE_WIDTH, false);
		s.append(737, 0.7683215f, 0.83138174f, STROKE_WIDTH, false);
		s.append(745, 0.7541371f, 0.8360656f, STROKE_WIDTH, false);
		s.append(753, 0.73995274f, 0.8430913f, STROKE_WIDTH, false);
		s.append(761, 0.7257683f, 0.84777516f, STROKE_WIDTH, false);
		s.append(769, 0.7115839f, 0.852459f, STROKE_WIDTH, false);
		s.append(777, 0.69503546f, 0.85480094f, STROKE_WIDTH, false);
		s.append(785, 0.68085104f, 0.8594848f, STROKE_WIDTH, false);
		s.append(793, 0.66193855f, 0.86416864f, STROKE_WIDTH, false);
		s.append(797, 0.6453901f, 0.8665105f, STROKE_WIDTH, false);
		s.append(805, 0.62647754f, 0.86885244f, STROKE_WIDTH, false);
		s.append(813, 0.60520095f, 0.87119436f, STROKE_WIDTH, false);
		s.append(821, 0.58392435f, 0.8735363f, STROKE_WIDTH, false);
		s.append(829, 0.5650118f, 0.8758782f, STROKE_WIDTH, false);
		s.append(837, 0.5437352f, 0.8758782f, STROKE_WIDTH, false);
		s.append(845, 0.5224586f, 0.8758782f, STROKE_WIDTH, false);
		s.append(853, 0.5035461f, 0.87119436f, STROKE_WIDTH, false);
		s.append(857, 0.4822695f, 0.86885244f, STROKE_WIDTH, false);
		s.append(865, 0.4609929f, 0.8618267f, STROKE_WIDTH, false);
		s.append(873, 0.44208038f, 0.85714287f, STROKE_WIDTH, false);
		s.append(881, 0.42316785f, 0.8501171f, STROKE_WIDTH, false);
		s.append(889, 0.4066194f, 0.8430913f, STROKE_WIDTH, false);
		s.append(897, 0.39243498f, 0.8360656f, STROKE_WIDTH, false);
		s.append(906, 0.3782506f, 0.8290398f, STROKE_WIDTH, false);
		s.append(913, 0.36643025f, 0.82201403f, STROKE_WIDTH, false);
		s.append(917, 0.356974f, 0.8126464f, STROKE_WIDTH, false);
		s.append(925, 0.34751773f, 0.8056206f, STROKE_WIDTH, false);
		s.append(933, 0.34042552f, 0.7962529f, STROKE_WIDTH, false);
		s.append(941, 0.3356974f, 0.7915691f, STROKE_WIDTH, false);
		s.append(949, 0.33333334f, 0.78688526f, STROKE_WIDTH, false);
		s.append(957, 0.33096927f, 0.78454334f, STROKE_WIDTH, false);
		s.append(973, 0.3286052f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1001, 0.33096927f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1220, 0.41843972f, 0.7236534f, STROKE_WIDTH, true);
		s.append(1221, 0.25768322f, 0.80093676f, STROKE_WIDTH, false);
		s.append(1221, 0.25531915f, 0.8126464f, STROKE_WIDTH, false);
		s.append(1225, 0.26950353f, 0.83372366f, STROKE_WIDTH, false);
		s.append(1233, 0.28605202f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1242, 0.3073286f, 0.85714287f, STROKE_WIDTH, false);
		s.append(1249, 0.33333334f, 0.8665105f, STROKE_WIDTH, false);
		s.append(1257, 0.35933807f, 0.8758782f, STROKE_WIDTH, false);
		s.append(1265, 0.38297874f, 0.8852459f, STROKE_WIDTH, false);
		s.append(1273, 0.40189126f, 0.89227164f, STROKE_WIDTH, false);
		s.append(1277, 0.41607565f, 0.8969555f, STROKE_WIDTH, false);
		s.append(1285, 0.42553192f, 0.90163934f, STROKE_WIDTH, false);
		s.append(1293, 0.43498817f, 0.9063232f, STROKE_WIDTH, false);
		s.append(1302, 0.4397163f, 0.9086651f, STROKE_WIDTH, false);
		s.append(1309, 0.4397163f, 0.91100705f, STROKE_WIDTH, false);
		s.append(1317, 0.43735224f, 0.91100705f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_round_clock_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.08983452f, 0.3442623f, STROKE_WIDTH, true);
		s.append(2, 0.09219858f, 0.30679157f, STROKE_WIDTH, false);
		s.append(2, 0.09929078f, 0.29508197f, STROKE_WIDTH, false);
		s.append(5, 0.10401891f, 0.2857143f, STROKE_WIDTH, false);
		s.append(13, 0.10638298f, 0.28103045f, STROKE_WIDTH, false);
		s.append(21, 0.10638298f, 0.27868852f, STROKE_WIDTH, false);
		s.append(29, 0.10874704f, 0.2740047f, STROKE_WIDTH, false);
		s.append(34, 0.11111111f, 0.26932085f, STROKE_WIDTH, false);
		s.append(41, 0.11347517f, 0.26697892f, STROKE_WIDTH, false);
		s.append(49, 0.11583924f, 0.26229507f, STROKE_WIDTH, false);
		s.append(57, 0.120567374f, 0.25761124f, STROKE_WIDTH, false);
		s.append(65, 0.12293144f, 0.2529274f, STROKE_WIDTH, false);
		s.append(73, 0.12765957f, 0.24824356f, STROKE_WIDTH, false);
		s.append(81, 0.13238771f, 0.24355972f, STROKE_WIDTH, false);
		s.append(89, 0.13475177f, 0.23887588f, STROKE_WIDTH, false);
		s.append(93, 0.1394799f, 0.23419204f, STROKE_WIDTH, false);
		s.append(102, 0.14420804f, 0.23185012f, STROKE_WIDTH, false);
		s.append(109, 0.14893617f, 0.22716628f, STROKE_WIDTH, false);
		s.append(117, 0.1536643f, 0.22248244f, STROKE_WIDTH, false);
		s.append(125, 0.15839243f, 0.21779859f, STROKE_WIDTH, false);
		s.append(133, 0.16548464f, 0.21311475f, STROKE_WIDTH, false);
		s.append(142, 0.17257683f, 0.20843092f, STROKE_WIDTH, false);
		s.append(149, 0.17966904f, 0.20140515f, STROKE_WIDTH, false);
		s.append(153, 0.18439716f, 0.19672132f, STROKE_WIDTH, false);
		s.append(161, 0.19148937f, 0.19203748f, STROKE_WIDTH, false);
		s.append(169, 0.19621749f, 0.18501171f, STROKE_WIDTH, false);
		s.append(177, 0.2033097f, 0.18032786f, STROKE_WIDTH, false);
		s.append(185, 0.20803782f, 0.17564403f, STROKE_WIDTH, false);
		s.append(193, 0.21276596f, 0.17096019f, STROKE_WIDTH, false);
		s.append(201, 0.21985815f, 0.16627635f, STROKE_WIDTH, false);
		s.append(209, 0.22695035f, 0.1615925f, STROKE_WIDTH, false);
		s.append(213, 0.23404256f, 0.15690866f, STROKE_WIDTH, false);
		s.append(221, 0.24349882f, 0.15222482f, STROKE_WIDTH, false);
		s.append(229, 0.25295508f, 0.14519906f, STROKE_WIDTH, false);
		s.append(238, 0.2600473f, 0.14051522f, STROKE_WIDTH, false);
		s.append(245, 0.26950353f, 0.13583139f, STROKE_WIDTH, false);
		s.append(253, 0.27659574f, 0.13114753f, STROKE_WIDTH, false);
		s.append(261, 0.28368795f, 0.1264637f, STROKE_WIDTH, false);
		s.append(269, 0.29078013f, 0.12177986f, STROKE_WIDTH, false);
		s.append(273, 0.29787233f, 0.11943794f, STROKE_WIDTH, false);
		s.append(281, 0.30496454f, 0.11709602f, STROKE_WIDTH, false);
		s.append(289, 0.3144208f, 0.11241218f, STROKE_WIDTH, false);
		s.append(298, 0.32387707f, 0.11007026f, STROKE_WIDTH, false);
		s.append(305, 0.33333334f, 0.10538641f, STROKE_WIDTH, false);
		s.append(313, 0.34515366f, 0.103044495f, STROKE_WIDTH, false);
		s.append(321, 0.35460994f, 0.10070258f, STROKE_WIDTH, false);
		s.append(329, 0.36643025f, 0.09601874f, STROKE_WIDTH, false);
		s.append(334, 0.37588653f, 0.09367681f, STROKE_WIDTH, false);
		s.append(341, 0.38534278f, 0.091334894f, STROKE_WIDTH, false);
		s.append(349, 0.39479905f, 0.088992976f, STROKE_WIDTH, false);
		s.append(357, 0.40425533f, 0.08665106f, STROKE_WIDTH, false);
		s.append(365, 0.41607565f, 0.08430913f, STROKE_WIDTH, false);
		s.append(373, 0.42553192f, 0.08430913f, STROKE_WIDTH, false);
		s.append(381, 0.43735224f, 0.08196721f, STROKE_WIDTH, false);
		s.append(389, 0.4491726f, 0.07962529f, STROKE_WIDTH, false);
		s.append(393, 0.4609929f, 0.07962529f, STROKE_WIDTH, false);
		s.append(401, 0.47281325f, 0.07962529f, STROKE_WIDTH, false);
		s.append(409, 0.48463356f, 0.07962529f, STROKE_WIDTH, false);
		s.append(417, 0.49881798f, 0.07962529f, STROKE_WIDTH, false);
		s.append(425, 0.5106383f, 0.07962529f, STROKE_WIDTH, false);
		s.append(433, 0.5224586f, 0.07962529f, STROKE_WIDTH, false);
		s.append(441, 0.5319149f, 0.08196721f, STROKE_WIDTH, false);
		s.append(449, 0.5437352f, 0.08430913f, STROKE_WIDTH, false);
		s.append(453, 0.5531915f, 0.08665106f, STROKE_WIDTH, false);
		s.append(461, 0.56264776f, 0.088992976f, STROKE_WIDTH, false);
		s.append(469, 0.5744681f, 0.091334894f, STROKE_WIDTH, false);
		s.append(477, 0.58392435f, 0.09367681f, STROKE_WIDTH, false);
		s.append(485, 0.59574467f, 0.09601874f, STROKE_WIDTH, false);
		s.append(493, 0.607565f, 0.09836066f, STROKE_WIDTH, false);
		s.append(501, 0.61938536f, 0.10070258f, STROKE_WIDTH, false);
		s.append(510, 0.6312057f, 0.10538641f, STROKE_WIDTH, false);
		s.append(513, 0.643026f, 0.10772834f, STROKE_WIDTH, false);
		s.append(521, 0.6548463f, 0.11007026f, STROKE_WIDTH, false);
		s.append(529, 0.6643026f, 0.11241218f, STROKE_WIDTH, false);
		s.append(537, 0.67375886f, 0.114754096f, STROKE_WIDTH, false);
		s.append(545, 0.68321514f, 0.11943794f, STROKE_WIDTH, false);
		s.append(554, 0.6903073f, 0.12412178f, STROKE_WIDTH, false);
		s.append(562, 0.69739956f, 0.12880562f, STROKE_WIDTH, false);
		s.append(569, 0.70449173f, 0.13348946f, STROKE_WIDTH, false);
		s.append(573, 0.7092199f, 0.14051522f, STROKE_WIDTH, false);
		s.append(581, 0.71631205f, 0.14519906f, STROKE_WIDTH, false);
		s.append(589, 0.7210402f, 0.15222482f, STROKE_WIDTH, false);
		s.append(597, 0.72813237f, 0.15925059f, STROKE_WIDTH, false);
		s.append(606, 0.7352246f, 0.16627635f, STROKE_WIDTH, false);
		s.append(613, 0.7446808f, 0.17330211f, STROKE_WIDTH, false);
		s.append(621, 0.75177306f, 0.18032786f, STROKE_WIDTH, false);
		s.append(629, 0.76122934f, 0.18735363f, STROKE_WIDTH, false);
		s.append(633, 0.77068555f, 0.19437939f, STROKE_WIDTH, false);
		s.append(641, 0.78014183f, 0.20374708f, STROKE_WIDTH, false);
		s.append(649, 0.7895981f, 0.21077283f, STROKE_WIDTH, false);
		s.append(657, 0.7990544f, 0.22014052f, STROKE_WIDTH, false);
		s.append(665, 0.80851066f, 0.22716628f, STROKE_WIDTH, false);
		s.append(673, 0.8179669f, 0.23653395f, STROKE_WIDTH, false);
		s.append(681, 0.8250591f, 0.24590164f, STROKE_WIDTH, false);
		s.append(689, 0.8321513f, 0.2529274f, STROKE_WIDTH, false);
		s.append(694, 0.83687943f, 0.26229507f, STROKE_WIDTH, false);
		s.append(702, 0.8416076f, 0.26932085f, STROKE_WIDTH, false);
		s.append(709, 0.8463357f, 0.27868852f, STROKE_WIDTH, false);
		s.append(717, 0.85106385f, 0.2880562f, STROKE_WIDTH, false);
		s.append(726, 0.8534279f, 0.2974239f, STROKE_WIDTH, false);
		s.append(733, 0.858156f, 0.30679157f, STROKE_WIDTH, false);
		s.append(741, 0.86052006f, 0.31615925f, STROKE_WIDTH, false);
		s.append(749, 0.8652482f, 0.32786885f, STROKE_WIDTH, false);
		s.append(753, 0.8676123f, 0.33723652f, STROKE_WIDTH, false);
		s.append(761, 0.87234044f, 0.34894612f, STROKE_WIDTH, false);
		s.append(769, 0.8747045f, 0.35831383f, STROKE_WIDTH, false);
		s.append(777, 0.8770686f, 0.37002343f, STROKE_WIDTH, false);
		s.append(785, 0.8794326f, 0.38173303f, STROKE_WIDTH, false);
		s.append(793, 0.8817967f, 0.3911007f, STROKE_WIDTH, false);
		s.append(801, 0.88416076f, 0.40515223f, STROKE_WIDTH, false);
		s.append(809, 0.8865248f, 0.41686183f, STROKE_WIDTH, false);
		s.append(813, 0.89125293f, 0.42857143f, STROKE_WIDTH, false);
		s.append(821, 0.89361703f, 0.44028103f, STROKE_WIDTH, false);
		s.append(829, 0.89361703f, 0.45433256f, STROKE_WIDTH, false);
		s.append(837, 0.8959811f, 0.46604216f, STROKE_WIDTH, false);
		s.append(845, 0.8983452f, 0.4800937f, STROKE_WIDTH, false);
		s.append(853, 0.9007092f, 0.4918033f, STROKE_WIDTH, false);
		s.append(861, 0.9007092f, 0.5058548f, STROKE_WIDTH, false);
		s.append(869, 0.9007092f, 0.5175644f, STROKE_WIDTH, false);
		s.append(873, 0.9007092f, 0.5316159f, STROKE_WIDTH, false);
		s.append(881, 0.9030733f, 0.54332554f, STROKE_WIDTH, false);
		s.append(889, 0.9030733f, 0.55737704f, STROKE_WIDTH, false);
		s.append(897, 0.9030733f, 0.5714286f, STROKE_WIDTH, false);
		s.append(905, 0.9007092f, 0.5854801f, STROKE_WIDTH, false);
		s.append(914, 0.9007092f, 0.5995316f, STROKE_WIDTH, false);
		s.append(921, 0.8983452f, 0.61358315f, STROKE_WIDTH, false);
		s.append(929, 0.8959811f, 0.6299766f, STROKE_WIDTH, false);
		s.append(933, 0.89361703f, 0.6440281f, STROKE_WIDTH, false);
		s.append(941, 0.8888889f, 0.6580796f, STROKE_WIDTH, false);
		s.append(949, 0.8865248f, 0.6721311f, STROKE_WIDTH, false);
		s.append(958, 0.8817967f, 0.68384075f, STROKE_WIDTH, false);
		s.append(965, 0.8770686f, 0.6955503f, STROKE_WIDTH, false);
		s.append(973, 0.86997634f, 0.70725995f, STROKE_WIDTH, false);
		s.append(981, 0.8652482f, 0.71662766f, STROKE_WIDTH, false);
		s.append(991, 0.858156f, 0.7259953f, STROKE_WIDTH, false);
		s.append(993, 0.85106385f, 0.735363f, STROKE_WIDTH, false);
		s.append(1001, 0.8416076f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1009, 0.8321513f, 0.7564403f, STROKE_WIDTH, false);
		s.append(1017, 0.820331f, 0.765808f, STROKE_WIDTH, false);
		s.append(1025, 0.80851066f, 0.77517563f, STROKE_WIDTH, false);
		s.append(1033, 0.79432625f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1041, 0.78014183f, 0.793911f, STROKE_WIDTH, false);
		s.append(1049, 0.7659575f, 0.8032787f, STROKE_WIDTH, false);
		s.append(1053, 0.74940896f, 0.8149883f, STROKE_WIDTH, false);
		s.append(1061, 0.7328605f, 0.82435596f, STROKE_WIDTH, false);
		s.append(1070, 0.713948f, 0.83372366f, STROKE_WIDTH, false);
		s.append(1077, 0.69503546f, 0.8430913f, STROKE_WIDTH, false);
		s.append(1085, 0.67375886f, 0.8501171f, STROKE_WIDTH, false);
		s.append(1093, 0.6524823f, 0.8594848f, STROKE_WIDTH, false);
		s.append(1101, 0.6288416f, 0.8665105f, STROKE_WIDTH, false);
		s.append(1109, 0.607565f, 0.87119436f, STROKE_WIDTH, false);
		s.append(1113, 0.5862884f, 0.87822014f, STROKE_WIDTH, false);
		s.append(1121, 0.56264776f, 0.88056207f, STROKE_WIDTH, false);
		s.append(1129, 0.54137117f, 0.882904f, STROKE_WIDTH, false);
		s.append(1137, 0.5224586f, 0.882904f, STROKE_WIDTH, false);
		s.append(1145, 0.501182f, 0.88056207f, STROKE_WIDTH, false);
		s.append(1153, 0.4822695f, 0.87822014f, STROKE_WIDTH, false);
		s.append(1161, 0.46335697f, 0.8758782f, STROKE_WIDTH, false);
		s.append(1169, 0.44444445f, 0.86885244f, STROKE_WIDTH, false);
		s.append(1173, 0.43026003f, 0.86416864f, STROKE_WIDTH, false);
		s.append(1181, 0.41371158f, 0.8594848f, STROKE_WIDTH, false);
		s.append(1189, 0.3995272f, 0.852459f, STROKE_WIDTH, false);
		s.append(1197, 0.38770685f, 0.84777516f, STROKE_WIDTH, false);
		s.append(1205, 0.37352246f, 0.84074944f, STROKE_WIDTH, false);
		s.append(1213, 0.36406618f, 0.8360656f, STROKE_WIDTH, false);
		s.append(1222, 0.35224587f, 0.8290398f, STROKE_WIDTH, false);
		s.append(1229, 0.3427896f, 0.82435596f, STROKE_WIDTH, false);
		s.append(1233, 0.33333334f, 0.8173302f, STROKE_WIDTH, false);
		s.append(1241, 0.32387707f, 0.81030446f, STROKE_WIDTH, false);
		s.append(1249, 0.31678486f, 0.80093676f, STROKE_WIDTH, false);
		s.append(1257, 0.3073286f, 0.7962529f, STROKE_WIDTH, false);
		s.append(1265, 0.3002364f, 0.7915691f, STROKE_WIDTH, false);
		s.append(1273, 0.29550827f, 0.78688526f, STROKE_WIDTH, false);
		s.append(1281, 0.29078013f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1289, 0.2884161f, 0.7822014f, STROKE_WIDTH, false);
		s.append(1293, 0.2884161f, 0.7798595f, STROKE_WIDTH, false);
		s.append(1421, 0.2884161f, 0.7822014f, STROKE_WIDTH, false);
		s.append(1429, 0.28605202f, 0.78454334f, STROKE_WIDTH, false);
		s.append(1437, 0.28605202f, 0.7892272f, STROKE_WIDTH, false);
		s.append(1445, 0.28605202f, 0.793911f, STROKE_WIDTH, false);
		s.append(1453, 0.28605202f, 0.80093676f, STROKE_WIDTH, false);
		s.append(1461, 0.28605202f, 0.8126464f, STROKE_WIDTH, false);
		s.append(1469, 0.28605202f, 0.82201403f, STROKE_WIDTH, false);
		s.append(1473, 0.28605202f, 0.83372366f, STROKE_WIDTH, false);
		s.append(1481, 0.2884161f, 0.84777516f, STROKE_WIDTH, false);
		s.append(1489, 0.29078013f, 0.8594848f, STROKE_WIDTH, false);
		s.append(1497, 0.2931442f, 0.86885244f, STROKE_WIDTH, false);
		s.append(1505, 0.2931442f, 0.87822014f, STROKE_WIDTH, false);
		s.append(1513, 0.29550827f, 0.882904f, STROKE_WIDTH, false);
		s.append(1521, 0.29550827f, 0.8852459f, STROKE_WIDTH, false);
		s.append(1529, 0.29787233f, 0.88758785f, STROKE_WIDTH, false);
		s.append(1557, 0.29550827f, 0.882904f, STROKE_WIDTH, false);
		s.append(1565, 0.2931442f, 0.8735363f, STROKE_WIDTH, false);
		s.append(1573, 0.2884161f, 0.8618267f, STROKE_WIDTH, false);
		s.append(1581, 0.28368795f, 0.84543324f, STROKE_WIDTH, false);
		s.append(1589, 0.27659574f, 0.8266979f, STROKE_WIDTH, false);
		s.append(1593, 0.2718676f, 0.81030446f, STROKE_WIDTH, false);
		s.append(1601, 0.2671395f, 0.7915691f, STROKE_WIDTH, false);
		s.append(1609, 0.26477543f, 0.77517563f, STROKE_WIDTH, false);
		s.append(1618, 0.26477543f, 0.76346606f, STROKE_WIDTH, false);
		s.append(1625, 0.26477543f, 0.75409836f, STROKE_WIDTH, false);
		s.append(1633, 0.2671395f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1641, 0.26950353f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1649, 0.27423167f, 0.74004686f, STROKE_WIDTH, false);
		s.append(1653, 0.28368795f, 0.74004686f, STROKE_WIDTH, false);
		s.append(1661, 0.29550827f, 0.74004686f, STROKE_WIDTH, false);
		s.append(1669, 0.31205675f, 0.74004686f, STROKE_WIDTH, false);
		s.append(1677, 0.33096927f, 0.74004686f, STROKE_WIDTH, false);
		s.append(1685, 0.3498818f, 0.7423888f, STROKE_WIDTH, false);
		s.append(1693, 0.3711584f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1701, 0.39007092f, 0.74473065f, STROKE_WIDTH, false);
		s.append(1709, 0.40425533f, 0.7470726f, STROKE_WIDTH, false);
		s.append(1714, 0.41607565f, 0.7470726f, STROKE_WIDTH, false);
		s.append(1721, 0.42553192f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1729, 0.427896f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1737, 0.43026003f, 0.7494145f, STROKE_WIDTH, false);
		s.append(1753, 0.42553192f, 0.7494145f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_down_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.5177305f, 0.64637f, STROKE_WIDTH, true);
		s.append(0, 0.51536644f, 0.6206089f, STROKE_WIDTH, false);
		s.append(0, 0.51300234f, 0.6088993f, STROKE_WIDTH, false);
		s.append(1, 0.5106383f, 0.60421544f, STROKE_WIDTH, false);
		s.append(1, 0.5106383f, 0.60655737f, STROKE_WIDTH, false);
		s.append(1, 0.51300234f, 0.618267f, STROKE_WIDTH, false);
		s.append(1, 0.51536644f, 0.62763464f, STROKE_WIDTH, false);
		s.append(4, 0.5177305f, 0.6487119f, STROKE_WIDTH, false);
		s.append(12, 0.5200946f, 0.66042155f, STROKE_WIDTH, false);
		s.append(20, 0.5224586f, 0.67447305f, STROKE_WIDTH, false);
		s.append(24, 0.5224586f, 0.6861827f, STROKE_WIDTH, false);
		s.append(32, 0.5248227f, 0.7002342f, STROKE_WIDTH, false);
		s.append(40, 0.5248227f, 0.71428573f, STROKE_WIDTH, false);
		s.append(48, 0.5248227f, 0.7259953f, STROKE_WIDTH, false);
		s.append(56, 0.5248227f, 0.73770493f, STROKE_WIDTH, false);
		s.append(64, 0.5248227f, 0.7494145f, STROKE_WIDTH, false);
		s.append(72, 0.5248227f, 0.7587822f, STROKE_WIDTH, false);
		s.append(76, 0.5248227f, 0.7681499f, STROKE_WIDTH, false);
		s.append(84, 0.5248227f, 0.77751756f, STROKE_WIDTH, false);
		s.append(92, 0.5248227f, 0.78454334f, STROKE_WIDTH, false);
		s.append(100, 0.5248227f, 0.7892272f, STROKE_WIDTH, false);
		s.append(108, 0.5248227f, 0.7962529f, STROKE_WIDTH, false);
		s.append(116, 0.5248227f, 0.80093676f, STROKE_WIDTH, false);
		s.append(124, 0.5224586f, 0.80796254f, STROKE_WIDTH, false);
		s.append(132, 0.5224586f, 0.8126464f, STROKE_WIDTH, false);
		s.append(136, 0.5224586f, 0.8173302f, STROKE_WIDTH, false);
		s.append(144, 0.5200946f, 0.82201403f, STROKE_WIDTH, false);
		s.append(152, 0.5200946f, 0.8290398f, STROKE_WIDTH, false);
		s.append(160, 0.5200946f, 0.83372366f, STROKE_WIDTH, false);
		s.append(168, 0.5177305f, 0.8384075f, STROKE_WIDTH, false);
		s.append(176, 0.5177305f, 0.84074944f, STROKE_WIDTH, false);
		s.append(184, 0.5177305f, 0.84543324f, STROKE_WIDTH, false);
		s.append(192, 0.5177305f, 0.84777516f, STROKE_WIDTH, false);
		s.append(196, 0.5177305f, 0.8501171f, STROKE_WIDTH, false);
		s.append(204, 0.5177305f, 0.85480094f, STROKE_WIDTH, false);
		s.append(212, 0.51536644f, 0.85714287f, STROKE_WIDTH, false);
		s.append(220, 0.51536644f, 0.8594848f, STROKE_WIDTH, false);
		s.append(228, 0.51536644f, 0.8618267f, STROKE_WIDTH, false);
		s.append(244, 0.51536644f, 0.86416864f, STROKE_WIDTH, false);
		s.append(252, 0.51536644f, 0.8665105f, STROKE_WIDTH, false);
		s.append(288, 0.51300234f, 0.86885244f, STROKE_WIDTH, false);
		s.append(296, 0.5106383f, 0.8735363f, STROKE_WIDTH, false);
		s.append(304, 0.5106383f, 0.87822014f, STROKE_WIDTH, false);
		s.append(312, 0.50827426f, 0.88056207f, STROKE_WIDTH, false);
		s.append(316, 0.50827426f, 0.8852459f, STROKE_WIDTH, false);
		s.append(324, 0.50827426f, 0.8899298f, STROKE_WIDTH, false);
		s.append(332, 0.50827426f, 0.89461356f, STROKE_WIDTH, false);
		s.append(340, 0.50827426f, 0.8969555f, STROKE_WIDTH, false);
		s.append(348, 0.50827426f, 0.8992974f, STROKE_WIDTH, false);
		s.append(356, 0.50827426f, 0.90398127f, STROKE_WIDTH, false);
		s.append(364, 0.50827426f, 0.9063232f, STROKE_WIDTH, false);
		s.append(372, 0.50827426f, 0.9086651f, STROKE_WIDTH, false);
		s.append(380, 0.50827426f, 0.91100705f, STROKE_WIDTH, false);
		s.append(384, 0.5106383f, 0.91569084f, STROKE_WIDTH, false);
		s.append(392, 0.51300234f, 0.91803277f, STROKE_WIDTH, false);
		s.append(400, 0.51300234f, 0.9203747f, STROKE_WIDTH, false);
		s.append(408, 0.51536644f, 0.9227166f, STROKE_WIDTH, false);
		s.append(416, 0.51536644f, 0.92505854f, STROKE_WIDTH, false);
		s.append(432, 0.5177305f, 0.92505854f, STROKE_WIDTH, false);
		s.append(460, 0.51536644f, 0.9227166f, STROKE_WIDTH, false);
		s.append(468, 0.51300234f, 0.91803277f, STROKE_WIDTH, false);
		s.append(476, 0.50827426f, 0.91100705f, STROKE_WIDTH, false);
		s.append(484, 0.5035461f, 0.90398127f, STROKE_WIDTH, false);
		s.append(492, 0.49881798f, 0.8969555f, STROKE_WIDTH, false);
		s.append(496, 0.49408984f, 0.8899298f, STROKE_WIDTH, false);
		s.append(504, 0.4893617f, 0.882904f, STROKE_WIDTH, false);
		s.append(512, 0.48699763f, 0.8758782f, STROKE_WIDTH, false);
		s.append(520, 0.48463356f, 0.87119436f, STROKE_WIDTH, false);
		s.append(528, 0.4822695f, 0.8665105f, STROKE_WIDTH, false);
		s.append(535, 0.47990543f, 0.8594848f, STROKE_WIDTH, false);
		s.append(543, 0.47754136f, 0.85714287f, STROKE_WIDTH, false);
		s.append(551, 0.47517732f, 0.852459f, STROKE_WIDTH, false);
		s.append(555, 0.47517732f, 0.8501171f, STROKE_WIDTH, false);
		s.append(564, 0.47517732f, 0.84777516f, STROKE_WIDTH, false);
		s.append(571, 0.47281325f, 0.84543324f, STROKE_WIDTH, false);
		s.append(620, 0.47281325f, 0.8501171f, STROKE_WIDTH, false);
		s.append(624, 0.47517732f, 0.85480094f, STROKE_WIDTH, false);
		s.append(631, 0.47754136f, 0.8618267f, STROKE_WIDTH, false);
		s.append(639, 0.47990543f, 0.86885244f, STROKE_WIDTH, false);
		s.append(647, 0.4822695f, 0.87822014f, STROKE_WIDTH, false);
		s.append(655, 0.48699763f, 0.8852459f, STROKE_WIDTH, false);
		s.append(663, 0.4893617f, 0.89227164f, STROKE_WIDTH, false);
		s.append(671, 0.49172577f, 0.90163934f, STROKE_WIDTH, false);
		s.append(675, 0.49408984f, 0.9063232f, STROKE_WIDTH, false);
		s.append(683, 0.49881798f, 0.913349f, STROKE_WIDTH, false);
		s.append(691, 0.501182f, 0.91803277f, STROKE_WIDTH, false);
		s.append(700, 0.501182f, 0.9203747f, STROKE_WIDTH, false);
		s.append(707, 0.5035461f, 0.9203747f, STROKE_WIDTH, false);
		s.append(724, 0.50591016f, 0.9203747f, STROKE_WIDTH, false);
		s.append(732, 0.50827426f, 0.91803277f, STROKE_WIDTH, false);
		s.append(736, 0.5106383f, 0.91100705f, STROKE_WIDTH, false);
		s.append(744, 0.51300234f, 0.90163934f, STROKE_WIDTH, false);
		s.append(751, 0.5177305f, 0.89461356f, STROKE_WIDTH, false);
		s.append(759, 0.5224586f, 0.8852459f, STROKE_WIDTH, false);
		s.append(767, 0.5248227f, 0.8758782f, STROKE_WIDTH, false);
		s.append(775, 0.52955085f, 0.86885244f, STROKE_WIDTH, false);
		s.append(783, 0.534279f, 0.86416864f, STROKE_WIDTH, false);
		s.append(792, 0.536643f, 0.85714287f, STROKE_WIDTH, false);
		s.append(800, 0.53900707f, 0.85480094f, STROKE_WIDTH, false);
		s.append(803, 0.5437352f, 0.8501171f, STROKE_WIDTH, false);
		s.append(812, 0.5460993f, 0.84777516f, STROKE_WIDTH, false);
		s.append(820, 0.54846334f, 0.84543324f, STROKE_WIDTH, false);
		s.append(827, 0.54846334f, 0.8430913f, STROKE_WIDTH, false);
		s.append(836, 0.55082744f, 0.84074944f, STROKE_WIDTH, false);
		s.append(852, 0.55082744f, 0.8384075f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_up_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.49408984f, 0.41217798f, STROKE_WIDTH, true);
		s.append(0, 0.49881798f, 0.36299765f, STROKE_WIDTH, false);
		s.append(0, 0.501182f, 0.3091335f, STROKE_WIDTH, false);
		s.append(4, 0.501182f, 0.2880562f, STROKE_WIDTH, false);
		s.append(12, 0.501182f, 0.2763466f, STROKE_WIDTH, false);
		s.append(20, 0.5035461f, 0.26932085f, STROKE_WIDTH, false);
		s.append(28, 0.5035461f, 0.25995317f, STROKE_WIDTH, false);
		s.append(32, 0.50591016f, 0.25058547f, STROKE_WIDTH, false);
		s.append(41, 0.50591016f, 0.24355972f, STROKE_WIDTH, false);
		s.append(49, 0.50591016f, 0.23653395f, STROKE_WIDTH, false);
		s.append(56, 0.50591016f, 0.22950819f, STROKE_WIDTH, false);
		s.append(65, 0.50591016f, 0.22482435f, STROKE_WIDTH, false);
		s.append(73, 0.50591016f, 0.21779859f, STROKE_WIDTH, false);
		s.append(81, 0.50827426f, 0.21311475f, STROKE_WIDTH, false);
		s.append(88, 0.50827426f, 0.20843092f, STROKE_WIDTH, false);
		s.append(92, 0.50827426f, 0.20374708f, STROKE_WIDTH, false);
		s.append(100, 0.50827426f, 0.20140515f, STROKE_WIDTH, false);
		s.append(108, 0.50827426f, 0.19672132f, STROKE_WIDTH, false);
		s.append(116, 0.5106383f, 0.19437939f, STROKE_WIDTH, false);
		s.append(124, 0.5106383f, 0.18969555f, STROKE_WIDTH, false);
		s.append(132, 0.51300234f, 0.18735363f, STROKE_WIDTH, false);
		s.append(140, 0.51300234f, 0.18501171f, STROKE_WIDTH, false);
		s.append(148, 0.51300234f, 0.18032786f, STROKE_WIDTH, false);
		s.append(152, 0.51536644f, 0.17798595f, STROKE_WIDTH, false);
		s.append(160, 0.51536644f, 0.17564403f, STROKE_WIDTH, false);
		s.append(168, 0.51536644f, 0.17330211f, STROKE_WIDTH, false);
		s.append(213, 0.51300234f, 0.17798595f, STROKE_WIDTH, false);
		s.append(220, 0.50827426f, 0.18266979f, STROKE_WIDTH, false);
		s.append(228, 0.5035461f, 0.18735363f, STROKE_WIDTH, false);
		s.append(236, 0.49881798f, 0.19437939f, STROKE_WIDTH, false);
		s.append(244, 0.49172577f, 0.20140515f, STROKE_WIDTH, false);
		s.append(252, 0.48699763f, 0.20843092f, STROKE_WIDTH, false);
		s.append(260, 0.4822695f, 0.21545668f, STROKE_WIDTH, false);
		s.append(268, 0.47990543f, 0.21779859f, STROKE_WIDTH, false);
		s.append(272, 0.47754136f, 0.22248244f, STROKE_WIDTH, false);
		s.append(296, 0.47754136f, 0.22014052f, STROKE_WIDTH, false);
		s.append(304, 0.47990543f, 0.21545668f, STROKE_WIDTH, false);
		s.append(312, 0.48463356f, 0.20843092f, STROKE_WIDTH, false);
		s.append(320, 0.4893617f, 0.19672132f, STROKE_WIDTH, false);
		s.append(328, 0.4964539f, 0.18266979f, STROKE_WIDTH, false);
		s.append(332, 0.5035461f, 0.16627635f, STROKE_WIDTH, false);
		s.append(340, 0.50827426f, 0.15222482f, STROKE_WIDTH, false);
		s.append(348, 0.51300234f, 0.14051522f, STROKE_WIDTH, false);
		s.append(356, 0.5177305f, 0.13114753f, STROKE_WIDTH, false);
		s.append(364, 0.5224586f, 0.12177986f, STROKE_WIDTH, false);
		s.append(372, 0.5248227f, 0.11709602f, STROKE_WIDTH, false);
		s.append(380, 0.52718675f, 0.114754096f, STROKE_WIDTH, false);
		s.append(388, 0.52955085f, 0.11241218f, STROKE_WIDTH, false);
		s.append(392, 0.52955085f, 0.11007026f, STROKE_WIDTH, false);
		s.append(416, 0.5319149f, 0.114754096f, STROKE_WIDTH, false);
		s.append(424, 0.534279f, 0.11943794f, STROKE_WIDTH, false);
		s.append(432, 0.536643f, 0.12880562f, STROKE_WIDTH, false);
		s.append(440, 0.53900707f, 0.1381733f, STROKE_WIDTH, false);
		s.append(448, 0.5437352f, 0.14754099f, STROKE_WIDTH, false);
		s.append(452, 0.54846334f, 0.15690866f, STROKE_WIDTH, false);
		s.append(460, 0.55082744f, 0.16627635f, STROKE_WIDTH, false);
		s.append(468, 0.5555556f, 0.17330211f, STROKE_WIDTH, false);
		s.append(477, 0.5579196f, 0.18032786f, STROKE_WIDTH, false);
		s.append(484, 0.56264776f, 0.18501171f, STROKE_WIDTH, false);
		s.append(492, 0.5650118f, 0.18735363f, STROKE_WIDTH, false);
		s.append(500, 0.56973994f, 0.19203748f, STROKE_WIDTH, false);
		s.append(508, 0.57210404f, 0.19437939f, STROKE_WIDTH, false);
		s.append(512, 0.5744681f, 0.19672132f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_right_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.47754136f, 0.29039812f, STROKE_WIDTH, true);
		s.append(0, 0.47517732f, 0.29508197f, STROKE_WIDTH, false);
		s.append(0, 0.47754136f, 0.29508197f, STROKE_WIDTH, false);
		s.append(0, 0.68085104f, 0.31850117f, STROKE_WIDTH, false);
		s.append(1, 0.73758864f, 0.32552692f, STROKE_WIDTH, false);
		s.append(5, 0.7825059f, 0.33021078f, STROKE_WIDTH, false);
		s.append(13, 0.7990544f, 0.3325527f, STROKE_WIDTH, false);
		s.append(21, 0.8132388f, 0.33723652f, STROKE_WIDTH, false);
		s.append(29, 0.8250591f, 0.33957845f, STROKE_WIDTH, false);
		s.append(33, 0.8345154f, 0.34192038f, STROKE_WIDTH, false);
		s.append(41, 0.8416076f, 0.34192038f, STROKE_WIDTH, false);
		s.append(49, 0.84869975f, 0.3442623f, STROKE_WIDTH, false);
		s.append(57, 0.8534279f, 0.34660423f, STROKE_WIDTH, false);
		s.append(65, 0.858156f, 0.34660423f, STROKE_WIDTH, false);
		s.append(73, 0.86052006f, 0.34894612f, STROKE_WIDTH, false);
		s.append(285, 0.7990544f, 0.2857143f, STROKE_WIDTH, true);
		s.append(285, 0.9148936f, 0.33723652f, STROKE_WIDTH, false);
		s.append(285, 0.9078014f, 0.34894612f, STROKE_WIDTH, false);
		s.append(285, 0.89125293f, 0.36065573f, STROKE_WIDTH, false);
		s.append(289, 0.85106385f, 0.38173303f, STROKE_WIDTH, false);
		s.append(297, 0.8345154f, 0.3911007f, STROKE_WIDTH, false);
		s.append(305, 0.820331f, 0.39812645f, STROKE_WIDTH, false);
		s.append(313, 0.8108747f, 0.40515223f, STROKE_WIDTH, false);
		s.append(321, 0.80614656f, 0.40983605f, STROKE_WIDTH, false);
		s.append(329, 0.8014184f, 0.4145199f, STROKE_WIDTH, false);
		return s;
	}
	public static AnimatedStroke hardcodedPen_left_xml() {
		AnimatedStroke s = new AnimatedStroke(STROKE_COLOR);
		s.append(0, 0.59101653f, 0.28337237f, STROKE_WIDTH, true);
		s.append(0, 0.56028366f, 0.28337237f, STROKE_WIDTH, false);
		s.append(1, 0.5177305f, 0.2880562f, STROKE_WIDTH, false);
		s.append(1, 0.4964539f, 0.29039812f, STROKE_WIDTH, false);
		s.append(5, 0.47517732f, 0.29039812f, STROKE_WIDTH, false);
		s.append(13, 0.46572104f, 0.29274005f, STROKE_WIDTH, false);
		s.append(21, 0.4539007f, 0.29274005f, STROKE_WIDTH, false);
		s.append(25, 0.44680852f, 0.29274005f, STROKE_WIDTH, false);
		s.append(33, 0.43735224f, 0.29508197f, STROKE_WIDTH, false);
		s.append(41, 0.42553192f, 0.29508197f, STROKE_WIDTH, false);
		s.append(49, 0.41607565f, 0.29508197f, STROKE_WIDTH, false);
		s.append(57, 0.4066194f, 0.29508197f, STROKE_WIDTH, false);
		s.append(65, 0.39479905f, 0.29508197f, STROKE_WIDTH, false);
		s.append(73, 0.38297874f, 0.2974239f, STROKE_WIDTH, false);
		s.append(81, 0.37352246f, 0.2974239f, STROKE_WIDTH, false);
		s.append(85, 0.3617021f, 0.2974239f, STROKE_WIDTH, false);
		s.append(93, 0.35224587f, 0.2974239f, STROKE_WIDTH, false);
		s.append(101, 0.34515366f, 0.2974239f, STROKE_WIDTH, false);
		s.append(109, 0.3356974f, 0.2997658f, STROKE_WIDTH, false);
		s.append(117, 0.32624114f, 0.2997658f, STROKE_WIDTH, false);
		s.append(125, 0.3144208f, 0.2997658f, STROKE_WIDTH, false);
		s.append(133, 0.30496454f, 0.2997658f, STROKE_WIDTH, false);
		s.append(141, 0.2931442f, 0.30210772f, STROKE_WIDTH, false);
		s.append(145, 0.28132388f, 0.30210772f, STROKE_WIDTH, false);
		s.append(153, 0.26950353f, 0.30210772f, STROKE_WIDTH, false);
		s.append(161, 0.2600473f, 0.30444965f, STROKE_WIDTH, false);
		s.append(169, 0.250591f, 0.30444965f, STROKE_WIDTH, false);
		s.append(177, 0.24113475f, 0.30444965f, STROKE_WIDTH, false);
		s.append(185, 0.22931442f, 0.30444965f, STROKE_WIDTH, false);
		s.append(193, 0.21985815f, 0.30444965f, STROKE_WIDTH, false);
		s.append(201, 0.21276596f, 0.30444965f, STROKE_WIDTH, false);
		s.append(205, 0.2033097f, 0.30444965f, STROKE_WIDTH, false);
		s.append(213, 0.19621749f, 0.30444965f, STROKE_WIDTH, false);
		s.append(221, 0.1891253f, 0.30444965f, STROKE_WIDTH, false);
		s.append(230, 0.18203309f, 0.30444965f, STROKE_WIDTH, false);
		s.append(237, 0.1749409f, 0.30444965f, STROKE_WIDTH, false);
		s.append(245, 0.17021276f, 0.30444965f, STROKE_WIDTH, false);
		s.append(253, 0.16548464f, 0.30444965f, STROKE_WIDTH, false);
		s.append(261, 0.16312057f, 0.30444965f, STROKE_WIDTH, false);
		s.append(265, 0.1607565f, 0.30444965f, STROKE_WIDTH, false);
		s.append(273, 0.15839243f, 0.30444965f, STROKE_WIDTH, false);
		s.append(565, 0.26241136f, 0.21545668f, STROKE_WIDTH, true);
		s.append(565, 0.2033097f, 0.23653395f, STROKE_WIDTH, false);
		s.append(565, 0.1394799f, 0.2763466f, STROKE_WIDTH, false);
		s.append(566, 0.120567374f, 0.2997658f, STROKE_WIDTH, false);
		s.append(566, 0.12293144f, 0.31381732f, STROKE_WIDTH, false);
		s.append(573, 0.13002364f, 0.3208431f, STROKE_WIDTH, false);
		s.append(581, 0.14420804f, 0.32786885f, STROKE_WIDTH, false);
		s.append(589, 0.16312057f, 0.33489463f, STROKE_WIDTH, false);
		s.append(597, 0.18439716f, 0.3442623f, STROKE_WIDTH, false);
		s.append(605, 0.20567375f, 0.35128805f, STROKE_WIDTH, false);
		s.append(613, 0.2245863f, 0.3559719f, STROKE_WIDTH, false);
		s.append(621, 0.24349882f, 0.36299765f, STROKE_WIDTH, false);
		s.append(625, 0.25768322f, 0.3676815f, STROKE_WIDTH, false);
		s.append(633, 0.26950353f, 0.37002343f, STROKE_WIDTH, false);
		s.append(641, 0.27659574f, 0.37236533f, STROKE_WIDTH, false);
		s.append(649, 0.28132388f, 0.37470725f, STROKE_WIDTH, false);
		s.append(657, 0.28368795f, 0.37704918f, STROKE_WIDTH, false);
		s.append(665, 0.28605202f, 0.3793911f, STROKE_WIDTH, false);
		s.append(673, 0.28605202f, 0.38173303f, STROKE_WIDTH, false);
		return s;
	}

}
